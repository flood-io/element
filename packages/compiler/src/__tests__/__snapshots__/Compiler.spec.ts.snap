// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compiler should compile test script to js string 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = exports.settings = void 0;

var _element = require(\\"@flood/element\\");

const settings = {
  // loopCount: 1,
  userAgent: 'I AM ROBOT',
  // Auto wait until elements are visible before acting
  waitUntil: 'visible'
};
/**
 * A helper to get the largest order number for Step 2
 */

exports.settings = settings;

const largestNumber = numbers => numbers.map(Number).sort((a, b) => a - b).reverse()[0];

var _default = () => {
  (0, _element.step)('Open page and click start', async b => {
    await b.visit('https://challenge.flood.io');
    await b.click(_element.By.css('#new_challenger > input.btn.btn-xl.btn-default'));
    await b.takeScreenshot();
  });
  (0, _element.step)('Challenge: Step 1', async b => {
    await b.selectByValue(_element.By.id('challenger_age'), '31');
    await b.takeScreenshot();
    await b.click('input.btn');
  });
  (0, _element.step)('Challenge: Step 2', async b => {
    let orderElements = await b.findElements(_element.By.css('table tbody tr td:first-of-type label'));
    let orderIDs = await Promise.all(orderElements.map(element => element.text()));
    let largestOrder = largestNumber(orderIDs); // Fill in text field

    await b.type(_element.By.id('challenger_largest_order'), String(largestOrder)); // Click label with order ID

    await b.click(_element.By.visibleText(String(largestOrder)));
    await b.takeScreenshot();
    await b.click(_element.By.css('input.btn'));
  });
  (0, _element.step)('Challenge: Step 3', async b => {
    await b.click('input.btn');
    await b.takeScreenshot();
  });
  (0, _element.step)('Challenge: Step 4', async b => {
    let element = await b.findElement('span.token');
    let token = await element.text();
    await b.type(_element.By.id('challenger_one_time_token'), token);
    await b.takeScreenshot();
    await b.click('input.btn');
  });
  (0, _element.step)('Challenge: Step 5', async b => {
    let element = await b.findElement('h2');
    await b.takeScreenshot();
    let completionText = await element.text();
    if (completionText.trim() !== \\"You're Done!\\") throw new Error(\`Expected header to be \\"You're Done!\\", got \\"\${completionText}\\"\`);
  });
};

exports.default = _default;"
`;
